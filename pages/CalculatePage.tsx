
import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { FaShareNodes, FaArrowRotateRight } from 'react-icons/fa6';
import { MeterCategory, MeterQuestion } from '../types';

const questionsData: Record<MeterCategory, MeterQuestion[]> = {
  [MeterCategory.Love]: [
    { question: "ржЖржкржирж╛рж░рж╛ ржПржХрж╕рж╛ржерзЗ ржХрждржЯрж╛ рж╕ржоржпрж╝ ржХрж╛ржЯрж╛ржи?", options: ["ржЦрзБржм ржХржо", "ржорж╛ржЭрзЗ ржорж╛ржЭрзЗ", "ржЕржирзЗржХ"], type: 'radio' },
    { question: "ржЫрзЛржЯ ржЫрзЛржЯ ржмрж┐рж╖ржпрж╝рзЗ ржХрж┐ ржЖржкржирж╛рж░рж╛ ржЭржЧрзЬрж╛ ржХрж░рзЗржи?", options: ["рж╣рзНржпрж╛ржБ, ржкрзНрж░рж╛рзЯржЗ", "ржорж╛ржЭрзЗ ржорж╛ржЭрзЗ", "ржирж╛, ржХрж░рж┐ ржирж╛"], type: 'radio' },
    { question: "ржПржХрзЗ ржЕржкрж░ржХрзЗ ржХрждржЯрж╛ ржмрзЛржЭрзЗржи?", options: ["ржПржХржжржоржЗ ржирж╛", "ржорзЛржЯрж╛ржорзБржЯрж┐", "ржЦрзБржм ржнрж╛рж▓рзЛ"], type: 'radio' },
  ],
  [MeterCategory.Friendship]: [
    { question: "ржмрж┐ржкржжрзЗ ржкрзЬрж▓рзЗ ржХрж╛ржХрзЗ ржЖржЧрзЗ ржлрзЛржи ржжрзЗржи?", options: ["ржкрж░рж┐ржмрж╛рж░ржХрзЗ", "ржПржЗ ржмржирзНржзрзБржХрзЗ", "ржЕржирзНржп ржХрж╛ржЙржХрзЗ"], type: 'radio' },
    { question: "ржЖржкржирж╛ржжрзЗрж░ ржоржзрзНржпрзЗ ржЧрзЛржкржи ржХржерж╛ рж╢рзЗрзЯрж╛рж░ рж╣рзЯ?", options: ["ржирж╛, рж╣рзЯ ржирж╛", "ржХрж┐ржЫрзБ ржХрж┐ржЫрзБ", "рж╕ржмржХрж┐ржЫрзБ"], type: 'radio' },
    { question: "ржХрждржжрж┐ржи ржХржерж╛ ржирж╛ ржмрж▓рзЗ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗржи?", options: ["ржПржХ рж╕ржкрзНрждрж╛рж╣", "ржПржХ ржорж╛рж╕", "ржПржХ ржмржЫрж░"], type: 'radio' },
  ],
  [MeterCategory.Laziness]: [
    { question: "рж╕ржХрж╛рж▓рзЗ ржШрзБржо ржерзЗржХрзЗ ржЙржарждрзЗ ржХрзЗржоржи рж▓рж╛ржЧрзЗ?", options: ["ржЦрзБржм ржХрж╖рзНржЯ", "ржорж╛ржЭрзЗ ржорж╛ржЭрзЗ", "рж╕рж╣ржЬ"], type: 'radio' },
    { question: "ржЖржЬржХрзЗрж░ ржХрж╛ржЬ ржХрж┐ ржХрж╛рж▓ржХрзЗрж░ ржЬржирзНржп рж░рж╛ржЦрзЗржи?", options: ["рж╕ржмрж╕ржорзЯ", "ржорж╛ржЭрзЗ ржорж╛ржЭрзЗ", "ржХржЦржирзЛржЗ ржирж╛"], type: 'radio' },
    { question: "ржмрж┐ржЫрж╛ржирж╛ ржерзЗржХрзЗ ржЙржарждрзЗ ржХрждржХрзНрж╖ржг рж▓рж╛ржЧрзЗ?", options: ["рзйрзж ржорж┐ржирж┐ржЯрзЗрж░ ржмрзЗрж╢рж┐", "рззрзж-рзирзж ржорж┐ржирж┐ржЯ", "рзл ржорж┐ржирж┐ржЯрзЗрж░ ржХржо"], type: 'radio' },
  ],
   [MeterCategory.Mood]: [
    { question: "ржЖржЬ ржЖржкржирж╛рж░ ржжрж┐ржиржЯрж╛ ржХрзЗржоржи ржпрж╛ржЪрзНржЫрзЗ?", options: ["ржЦрзБржм ржЦрж╛рж░рж╛ржк", "ржорзЛржЯрж╛ржорзБржЯрж┐", "ржЪржорзОржХрж╛рж░"], type: 'radio' },
    { question: "ржЫрзЛржЯ ржмрж┐рж╖ржпрж╝рзЗ ржХрж┐ ржорзЗржЬрж╛ржЬ ржЦрж╛рж░рж╛ржк рж╣ржпрж╝?", options: ["рж╣рзНржпрж╛ржБ, ржкрзНрж░рж╛ржпрж╝ржЗ", "ржорж╛ржЭрзЗ ржорж╛ржЭрзЗ", "ржирж╛"], type: 'radio' },
    { question: "ржЖржкржирж╛рж░ ржХрж┐ ржПржЦржи ржЧрж╛ржи рж╢рзБржирждрзЗ ржЗржЪрзНржЫрж╛ ржХрж░ржЫрзЗ?", options: ["рж╣рзНржпрж╛ржБ", "ржирж╛", "ржХрж┐ржЫрзБ ржмрж▓рждрзЗ ржкрж╛рж░ржЫрж┐ ржирж╛"], type: 'radio' },
  ],
  [MeterCategory.Maturity]: [
    { question: "рж╕ржорж╛рж▓рзЛржЪржирж╛ ржХрзАржнрж╛ржмрзЗ ржЧрзНрж░рж╣ржг ржХрж░рзЗржи?", options: ["ржЦрзБржм рж░рзЗржЧрзЗ ржпрж╛ржЗ", "ржХрж┐ржЫрзБржЯрж╛ ржЦрж╛рж░рж╛ржк рж▓рж╛ржЧрзЗ", "ржнрзБрж▓ ржерзЗржХрзЗ рж╢рж┐ржЦрж┐"], type: 'radio' },
    { question: "ржЖржмрзЗржЧ ржжрж┐рзЯрзЗ рж╕рж┐ржжрзНржзрж╛ржирзНржд ржирзЗржи ржирж╛ржХрж┐ ржпрзБржХрзНрждрж┐ ржжрж┐рзЯрзЗ?", options: ["рж╢рзБржзрзБ ржЖржмрзЗржЧ", "ржжрзБржЯрзЛржЗ", "рж╢рзБржзрзБ ржпрзБржХрзНрждрж┐"], type: 'radio' },
    { question: "ржнржмрж┐рж╖рзНржпрзО ржирж┐рзЯрзЗ ржХрж┐ ржЖржкржирж┐ ржЪрж┐ржирзНрждрж┐ржд?", options: ["ржЕрждрж┐рж░рж┐ржХрзНржд", "ржорж╛ржЭрзЗ ржорж╛ржЭрзЗ", "ржкрж░рж┐ржХрж▓рзНржкржирж╛ ржХрж░рзЗ ржЪрж▓рж┐"], type: 'radio' },
  ],
  [MeterCategory.Frustration]: [
    { question: "ржЫрзЛржЯржЦрж╛ржЯрзЛ ржмрж┐рж╖ржпрж╝рзЗ ржХрж┐ рж╣рждрж╛рж╢ рж╣ржи?", options: ["рж╣рзНржпрж╛ржБ, рж╕ржмрж╕ржоржпрж╝", "ржорж╛ржЭрзЗ ржорж╛ржЭрзЗ", "ржирж╛, рж╣ржЗ ржирж╛"], type: 'radio' },
    { question: "ржоржирзЗ рж╣ржпрж╝ ржХрж┐ ржЖржкржирж╛рж░ рж╕рж╛ржерзЗ ржХрж┐ржЫрзБржЗ ржнрж╛рж▓рзЛ рж╣ржпрж╝ ржирж╛?", options: ["рж╣рзНржпрж╛ржБ, ржкрзНрж░рж╛ржпрж╝ржЗ", "ржХржЦржирзЛ ржХржЦржирзЛ", "ржирж╛, ржоржирзЗ рж╣ржпрж╝ ржирж╛"], type: 'radio' },
    { question: "ржХрждржЯрж╛ ржПржХрж╛ рж▓рж╛ржЧрзЗ ржЖржкржирж╛рж░?", options: ["ржЦрзБржм ржмрзЗрж╢рж┐", "ржорж╛ржЭрзЗ ржорж╛ржЭрзЗ", "рж▓рж╛ржЧрзЗ ржирж╛"], type: 'radio' },
  ],
  [MeterCategory.Foodie]: [
    { question: "ржирждрзБржи ржЦрж╛ржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рждрзЗ ржХрзЗржоржи рж▓рж╛ржЧрзЗ?", options: ["ржнржпрж╝ рж▓рж╛ржЧрзЗ", "ржорж╛ржЭрзЗ ржорж╛ржЭрзЗ", "ржЦрзБржм ржнрж╛рж▓рзЛржмрж╛рж╕рж┐"], type: 'radio' },
    { question: "ржЖржкржирж╛рж░ ржХрж┐ ржкрзНрж░рж╛ржпрж╝ржЗ ржХрзНрж╖рзБржзрж╛ рж▓рж╛ржЧрзЗ?", options: ["рж╣рзНржпрж╛ржБ, рж╕ржмрж╕ржоржпрж╝", "ржорж╛ржЭрзЗ ржорж╛ржЭрзЗ", "ржирж╛"], type: 'radio' },
    { question: "ызЫьзС ржжрзЗржЦрж▓рзЗржЗ ржХрж┐ ржЦрзЗрждрзЗ ржЗржЪрзНржЫрж╛ ржХрж░рзЗ?", options: ["рж╣рзНржпрж╛ржБ!", "ржирж╛", "ржХржЦржирзЛ ржХржЦржирзЛ"], type: 'radio' },
  ]
};

const resultTexts: Record<MeterCategory, (score: number) => string> = {
    [MeterCategory.Love]: score => `ржЖржкржирж╛рж░ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛рж░ ржорж╛рждрзНрж░рж╛: ${score}%! ЁЯе░ ${score > 80 ? 'ржПржЯрж╛ ржПржХрзЗржмрж╛рж░рзЗ ржкрзНрж░рзЗржорж┐ржХ-рж▓рзЗржнрзЗрж▓ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛!' : (score > 50 ? 'ржЖржкржирж╛ржжрзЗрж░ рж╕ржорзНржкрж░рзНржХ ржмрзЗрж╢ ржоржЬржмрзБрждред' : 'ржЖрж░ржУ ржПржХржЯрзБ ржпрждрзНржи ржирж┐ржи рж╕ржорзНржкрж░рзНржХрзЗрж░ред')}`,
    [MeterCategory.Friendship]: score => `ржЖржкржирж╛ржжрзЗрж░ ржмржирзНржзрзБрждрзНржмрзЗрж░ рж╕рзНржХрзЗрж▓: ${score}%! ЁЯдЭ ${score > 85 ? 'ржЖржкржирж╛рж░рж╛ рждрзЛ ржПржХрзЗржмрж╛рж░рзЗ рж╣рж░рж┐рж╣рж░ ржЖрждрзНржорж╛!' : (score > 60 ? 'ржмржирзНржзрзБрждрзНржм ржмрзЗрж╢ ржнрж╛рж▓рзЛ, ржЪрж╛рж▓рж┐ржпрж╝рзЗ ржпрж╛ржиред': 'ржмржирзНржзрзБрждрзНржмрзЗрж░ ржЪрж░рзНржЪрж╛ ржжрж░ржХрж╛рж░ред')}`,
    [MeterCategory.Laziness]: score => `ржЖржкржирж╛рж░ ржЕрж▓рж╕рждрж╛ рж╕рзНржХрзЛрж░: ${score}%! ЁЯТд ${score > 80 ? 'ржЖржкржирж┐ рждрзЛ ржХрзБржорзНржнржХрж░рзНржгрзЗрж░ ржмржВрж╢ржзрж░!' : (score > 50 ? 'ржорж╛ржЭрзЗ ржорж╛ржЭрзЗ ржЖрж▓рж╕рзЗржорж┐ ржХрж░рж╛ ржнрж╛рж▓рзЛред' : 'ржЖржкржирж┐ ржЦрзБржмржЗ ржкрж░рж┐рж╢рзНрж░ржорзА!')}`,
    [MeterCategory.Mood]: score => `ржЖржкржирж╛рж░ ржорзБржб ржорж┐ржЯрж╛рж░: ${score}%! ЁЯОи ${score > 75 ? 'ржЖржкржирж╛рж░ ржоржи ржЖржЬ ржлрзБрж░ржлрзБрж░рзЗ!' : (score > 40 ? 'ржоржи ржорзЛржЯрж╛ржорзБржЯрж┐ ржнрж╛рж▓рзЛред': 'ржоржиржЯрж╛ ржПржХржЯрзБ ржнрж╛рж▓рзЛ ржХрж░рзБржиред')}`,
    [MeterCategory.Maturity]: score => `ржЖржкржирж╛рж░ ржорзНржпрж╛ржЪрж┐ржЙрж░рж┐ржЯрж┐ рж▓рзЗржнрзЗрж▓: ${score}%! ЁЯдФ ${score > 80 ? 'ржЖржкржирж┐ ржмрзЯрж╕рзЗрж░ ржЪрзЗрзЯрзЗ ржЕржирзЗржХ ржмрзЗрж╢рж┐ ржкрж░рж┐ржгржд!' : (score > 50 ? 'ржЖржкржирж┐ рж╕ржарж┐ржХ ржкржерзЗржЗ ржЖржЫрзЗржиред': 'ржЕржнрж┐ржЬрзНржЮрждрж╛ ржЖржкржирж╛ржХрзЗ ржЖрж░ржУ рж╢рзЗржЦрж╛ржмрзЗред')}`,
    [MeterCategory.Frustration]: score => `ржЖржкржирж╛рж░ рж╣рждрж╛рж╢рж╛рж░ рж▓рзЗржмрзЗрж▓: ${score}%! ЁЯШЯ ${score > 70 ? 'ржоржирзЗ рж╣ржЪрзНржЫрзЗ ржЖржкржирж┐ ржЦрзБржм ржХржарж┐ржи рж╕ржоржпрж╝ ржкрж╛рж░ ржХрж░ржЫрзЗржиред' : (score > 40 ? 'ржХрж┐ржЫрзБржЯрж╛ ржЪрж╛ржк ржЖржЫрзЗ, рждржмрзЗ ржарж┐ржХ рж╣ржпрж╝рзЗ ржпрж╛ржмрзЗред': 'ржЖржкржирж┐ ржмрзЗрж╢ рж╢рж╛ржирзНржд ржЖржЫрзЗржиред')}`,
    [MeterCategory.Foodie]: score => `ржЖржкржирж┐ ${score}% ржЦрж╛ржжрзНржп ржкрзНрж░рзЗржорж┐ржХ! ЁЯНФ ${score > 85 ? 'ржЦрж╛ржмрж╛рж░ржЗ ржЖржкржирж╛рж░ ржкрзНрж░ржержо ржнрж╛рж▓рзЛржмрж╛рж╕рж╛!' : (score > 60 ? 'ржЖржкржирж┐ ржЦрзЗрждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рзЗржиред': 'ржЖржкржирж┐ рж╕рзНржмрж╛рж╕рзНржерзНржпрзЗрж░ ржкрзНрж░рждрж┐ ржмрзЗрж╢ рж╕ржЪрзЗрждржиред')}`,
};


const CalculatePage: React.FC = () => {
  const location = useLocation();
  const queryParams = new URLSearchParams(location.search);
  const initialCategory = (queryParams.get('category') as MeterCategory) || '';
  
  const [selectedCategory, setSelectedCategory] = useState<MeterCategory | ''>(initialCategory);
  const [names, setNames] = useState({ name1: '', name2: '' });
  const [answers, setAnswers] = useState<number[]>([]);
  const [result, setResult] = useState<number | null>(null);

  useEffect(() => {
    setSelectedCategory(initialCategory);
    resetForm();
  }, [initialCategory]);

  const handleCategoryChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedCategory(e.target.value as MeterCategory);
    resetForm();
  };
  
  const resetForm = () => {
    setNames({ name1: '', name2: '' });
    setAnswers([]);
    setResult(null);
  }

  const handleAnswer = (qIndex: number, value: number) => {
    const newAnswers = [...answers];
    newAnswers[qIndex] = value;
    setAnswers(newAnswers);
  };
  
  const calculateResult = () => {
    const totalPossibleScore = (questionsData[selectedCategory as MeterCategory]?.length || 0) * 2;
    const userScore = answers.reduce((acc, curr) => acc + curr, 0);
    const percentage = Math.floor(((userScore + Math.random() * 2) / (totalPossibleScore + 1)) * 100);
    setResult(Math.min(100, Math.max(10, percentage)));
  };

  const isFormComplete = selectedCategory && 
    (![MeterCategory.Love, MeterCategory.Friendship].includes(selectedCategory) || (names.name1 && names.name2)) &&
    (answers.length === questionsData[selectedCategory]?.length && answers.every(a => a !== undefined));

  return (
    <div className="container mx-auto px-6 py-12">
      <div className="max-w-2xl mx-auto bg-white p-8 rounded-2xl shadow-xl">
        <AnimatePresence mode="wait">
          {result === null ? (
            <motion.div
              key="form"
              initial={{ opacity: 0, x: -50 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: 50 }}
              transition={{ duration: 0.5 }}
            >
              <h1 className="text-3xl font-bold text-center mb-6">ржЕржирзБржнрзВрждрж┐ ржкрж░рж┐ржорж╛ржк ржХрж░рзБржи</h1>
              
              <div className="mb-6">
                <label className="block text-lg font-semibold mb-2" htmlFor="category-select">ржЖржкржирж┐ ржХрзА ржорж╛ржкрждрзЗ ржЪрж╛ржи?</label>
                <select 
                  id="category-select" 
                  value={selectedCategory} 
                  onChange={handleCategoryChange}
                  className="w-full p-3 border border-gray-300 rounded-lg bg-gray-50 focus:ring-2 focus:ring-[#FF6B81] focus:border-transparent transition"
                >
                  <option value="" disabled>ржПржХржЯрж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи</option>
                  {Object.values(MeterCategory).map(cat => <option key={cat} value={cat}>{cat}</option>)}
                </select>
              </div>

              {selectedCategory && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                >
                  {[MeterCategory.Love, MeterCategory.Friendship].includes(selectedCategory) && (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                      <input type="text" placeholder="ржЖржкржирж╛рж░ ржирж╛ржо" value={names.name1} onChange={e => setNames({...names, name1: e.target.value})} className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#6C63FF]"/>
                      <input type="text" placeholder="ржЕржирзНржпржЬржирзЗрж░ ржирж╛ржо" value={names.name2} onChange={e => setNames({...names, name2: e.target.value})} className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#6C63FF]"/>
                    </div>
                  )}

                  {questionsData[selectedCategory].map((q, qIndex) => (
                    <div key={qIndex} className="mb-6 p-4 bg-pink-50/50 rounded-lg">
                      <p className="font-semibold mb-3">{q.question}</p>
                      <div className="flex justify-around">
                        {q.options.map((opt, oIndex) => (
                          <label key={oIndex} className="flex items-center space-x-2 cursor-pointer">
                            <input type="radio" name={`q${qIndex}`} checked={answers[qIndex] === oIndex} onChange={() => handleAnswer(qIndex, oIndex)} className="form-radio text-[#FF6B81] focus:ring-[#FF6B81]"/>
                            <span>{opt}</span>
                          </label>
                        ))}
                      </div>
                    </div>
                  ))}

                  <motion.button 
                    onClick={calculateResult}
                    disabled={!isFormComplete}
                    whileHover={{ scale: isFormComplete ? 1.05 : 1 }}
                    className="w-full p-4 bg-gradient-to-r from-[#FF6B81] to-[#FFB6C1] text-white font-bold text-lg rounded-full shadow-lg transition disabled:bg-gray-400 disabled:cursor-not-allowed disabled:shadow-none"
                  >
                    ржлрж▓рж╛ржлрж▓ ржжрзЗржЦрзБржи
                  </motion.button>
                </motion.div>
              )}
            </motion.div>
          ) : (
            <motion.div
              key="result"
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.8 }}
              transition={{ duration: 0.5 }}
              className="text-center"
            >
              <h2 className="text-2xl font-bold mb-4">ржЖржкржирж╛рж░ ржлрж▓рж╛ржлрж▓</h2>
              <div className="relative w-48 h-48 mx-auto mb-6">
                <svg className="w-full h-full" viewBox="0 0 36 36">
                  <path
                    d="M18 2.0845
                      a 15.9155 15.9155 0 0 1 0 31.831
                      a 15.9155 15.9155 0 0 1 0 -31.831"
                    className="stroke-current text-gray-200"
                    fill="none"
                    strokeWidth="3.8"
                  />
                  <motion.path
                    d="M18 2.0845
                      a 15.9155 15.9155 0 0 1 0 31.831
                      a 15.9155 15.9155 0 0 1 0 -31.831"
                    fill="none"
                    strokeWidth="3.8"
                    strokeDasharray={`${result}, 100`}
                    className="stroke-current text-[#FF6B81]"
                    initial={{ strokeDasharray: '0, 100' }}
                    animate={{ strokeDasharray: `${result}, 100` }}
                    transition={{ duration: 1.5, ease: 'easeInOut' }}
                  />
                </svg>
                <div className="absolute inset-0 flex items-center justify-center">
                  <motion.span
                    className="text-5xl font-bold text-[#FF6B81]"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 0.5, duration: 0.5 }}
                  >
                    {result}%
                  </motion.span>
                </div>
              </div>

              <p className="text-xl text-gray-700 mb-8">{resultTexts[selectedCategory as MeterCategory](result)}</p>

              <div className="flex justify-center space-x-4">
                <button className="flex items-center px-6 py-2 bg-[#6C63FF] text-white font-semibold rounded-full shadow-md hover:bg-opacity-90 transition-all">
                  <FaShareNodes className="mr-2"/> рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржи
                </button>
                 <button onClick={resetForm} className="flex items-center px-6 py-2 bg-gray-200 text-gray-700 font-semibold rounded-full hover:bg-gray-300 transition-all">
                  <FaArrowRotateRight className="mr-2"/> ржЖржмрж╛рж░ ржХрж░рзБржи
                </button>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};

export default CalculatePage;
